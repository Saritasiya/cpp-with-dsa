class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end()); // Step 1: Sort the array
        int n = nums.size();
        int closestSum = nums[0] + nums[1] + nums[2]; // Initialize with the first possible sum

        for (int i = 0; i < n - 2; ++i) {
            int left = i + 1;
            int right = n - 1;

            while (left < right) {
                int currSum = nums[i] + nums[left] + nums[right];

                // Update closestSum if current is closer to target
                if (abs(currSum - target) < abs(closestSum - target)) {
                    closestSum = currSum;
                }

                // Move pointers
                if (currSum < target) {
                    ++left;
                } else if (currSum > target) {
                    --right;
                } else {
                    return currSum; // Found exact match
                }
            }
        }

        return closestSum;
    }
};
