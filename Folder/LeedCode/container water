// Brute solve
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxProfit =0;
        int bestBuy=prices[0];
        for(int i=1; i<prices.size(); i++){
            if(prices[i] > bestBuy){
                maxProfit = max(maxProfit, prices[i] - bestBuy);
            }
            bestBuy= min(bestBuy , prices[i]);
        }
        return  maxProfit;
        
    }
};

optimal  solution 


class Solution {
public:
    int maxArea(vector<int>& height) {
        int maxWater = 0;
        int lp=0, rp=height.size()-1;
        while(lp<rp){
            int w=rp-lp;
            int ht =min(height[lp], height[rp]);
            int currWater = w * ht;
            maxWater = max(maxWater , currWater);
            height [lp]< height [rp]? lp++ : rp--;

        }
            
        
        return  maxWater;
    }
