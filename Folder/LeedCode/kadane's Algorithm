1 ///Kadane's Algorithm 

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currSum=0, maxSum=INT_MIN;
        for(int val : nums){
            currSum+=val;
            maxSum=max(currSum, maxSum);
            if(currSum<0){
                currSum=0;
            }
        }
         return maxSum;
    }
   
};



/// All sub Array

int main(){
	int n=5;
	int arr[5]={1,2,3,4,5};
	for(int st=0; st<n;st++)
	{
		for(int end=st; end<n; end++){
			for(int i=st; i<=end; i++){
			
			cout<<arr[i];
		}
		cout<<" ";
	}
	cout<<endl;
}
return 0;
	
}

2 ///Maximum SubArray Sum
**// Brute force  Approach

int main(){
	int n=5;
	int arr[5]={1,2,3,4,5};
	int maxSum= INT_MIN;
	for(int st=0; st<n;st++)
	{
		int curSum=0;
		for(int end=st; end<n; end++){
			curSum+=arr[end];
			maxSum=max(curSum, maxSum);
			
	}
}

cout<<" max subArray sum:"<<maxSum<<endl;
return 0;
	
}
